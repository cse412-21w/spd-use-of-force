{"version":3,"sources":["timeline.js"],"names":["options","config","init","view","tooltip","vegaTooltip","Handler","call","renderer","vl","register","vega","vegaLite","uof","d3","json","then","data","levels","parser","timeParse","year","timeFormat","bb","map","incident","incident_type","indexOf","occured_date_time","Occurance_Date","blah","drawTimeline","hover","selectSingle","encodings","on","nearest","empty","line","markLine","encode","x","fieldT","title","timeUnit","y","count","color","field","base","transform","filter","label","align","dx","dy","white","stroke","strokeWidth","dateBase","dateLabel","white1","tooltipBase","layer","markText","value","text","markRule","markCircle","select","opacity","if","width","height","render","viewElement","document","getElementById","appendChild"],"mappings":";;;;;;AAAA,IAAMA,OAAO,GAAG;AACdC,EAAAA,MAAM,EAAE,CACN;AADM,GADM;AAIdC,EAAAA,IAAI,EAAE,cAACC,IAAD,EAAU;AACd;AACAA,IAAAA,IAAI,CAACC,OAAL,CAAa,IAAIC,WAAW,CAACC,OAAhB,GAA0BC,IAAvC;AACD,GAPa;AAQdJ,EAAAA,IAAI,EAAE;AACJ;AACA;AACA;AACA;AACA;AACAK,IAAAA,QAAQ,EAAE;AANN;AARQ,CAAhB;AAkBAC,EAAE,CAACC,QAAH,CAAYC,IAAZ,EAAkBC,QAAlB,EAA4BZ,OAA5B,GAEA;;AACA,IAAIa,GAAG,GAAG,EAAV;AAEAC,EAAE,CAACC,IAAH,CAAQ,+DAAR,EAAyEC,IAAzE,CAA8E,UAASC,IAAT,EAAe;AAC3F,MAAMC,MAAM,GAAG,CAAC,wBAAD,EAA2B,wBAA3B,EAAqD,wBAArD,EAA8E,eAA9E,CAAf;AACE,MAAMC,MAAM,GAAGL,EAAE,CAACM,SAAH,CAAa,sBAAb,CAAf;AACA,MAAMC,IAAI,GAAGP,EAAE,CAACQ,UAAH,CAAc,OAAd,CAAb;AACA,MAAMC,EAAE,GAAGT,EAAE,CAACQ,UAAH,CAAc,OAAd,CAAX;AACAT,EAAAA,GAAG,GAAGI,IAAI,CAACO,GAAL,CAAS,UAAAC,QAAQ;AAAA,2CAChBA,QADgB;AAEnBC,MAAAA,aAAa,EAAE,IAAER,MAAM,CAACS,OAAP,CAAeF,QAAQ,CAACC,aAAxB,CAFE;AAGnBE,MAAAA,iBAAiB,EAAET,MAAM,CAACM,QAAQ,CAACG,iBAAV,CAHN;AAInBC,MAAAA,cAAc,EAAER,IAAI,CAACF,MAAM,CAACM,QAAQ,CAACG,iBAAV,CAAP,CAJD;AAKnBE,MAAAA,IAAI,EAAEP,EAAE,CAACJ,MAAM,CAACM,QAAQ,CAACG,iBAAV,CAAP;AALW;AAAA,GAAjB,CAAN,CALyF,CAY1F;;AACCG,EAAAA,YAAY,GAb6E,CAczF;AACH,CAfD;;AAiBA,SAASA,YAAT,GAAwB;AACtB;AACA;AACA,MAAMC,KAAK,GAAGvB,EAAE,CAACwB,YAAH,GACXC,SADW,CACD,GADC,EACK;AADL,GAEXC,EAFW,CAER,WAFQ,EAEK;AAFL,GAGXC,OAHW,CAGH,IAHG,EAGK;AAHL,GAIXC,KAJW,CAIL,MAJK,CAAd,CAHsB,CAOH;;AACnB,MAAMC,IAAI,GAAG7B,EAAE,CAAC8B,QAAH,GACVtB,IADU,CACLJ,GADK,EAEV2B,MAFU,CAGX/B,EAAE,CAACgC,CAAH,GAAOC,MAAP,CAAc,MAAd,EAAsBC,KAAtB,CAA4B,MAA5B,EAAoCC,QAApC,CAA6C,WAA7C,CAHW,EAIXnC,EAAE,CAACoC,CAAH,GAAOC,KAAP,CAAa,cAAb,EAA6BH,KAA7B,CAAmC,QAAnC,CAJW,EAKXlC,EAAE,CAACsC,KAAH,GAAWC,KAAX,CAAiB,cAAjB,CALW,CAAb,CARsB,CAcpB;;AACD,MAAMC,IAAI,GAAGX,IAAI,CAACY,SAAL,CAAezC,EAAE,CAAC0C,MAAH,CAAUnB,KAAV,CAAf,CAAb,CAfqB,CAiBrB;;AACC,MAAMoB,KAAK,GAAG;AAACC,IAAAA,KAAK,EAAE,MAAR;AAAgBC,IAAAA,EAAE,EAAE,CAApB;AAAuBC,IAAAA,EAAE,EAAE,CAAC;AAA5B,GAAd;AACA,MAAMC,KAAK,GAAG;AAACC,IAAAA,MAAM,EAAE,OAAT;AAAkBC,IAAAA,WAAW,EAAE;AAA/B,GAAd;AAEC,MAAMC,QAAQ,GAAGV,IAAI,CAACC,SAAL,CAAezC,EAAE,CAAC0C,MAAH,CAAUnB,KAAV,CAAf,CAAjB;AACA,MAAM4B,SAAS,GAAG;AAACP,IAAAA,KAAK,EAAE,QAAR;AAAkBC,IAAAA,EAAE,EAAC,CAArB;AAAwBC,IAAAA,EAAE,EAAE,CAAC;AAA7B,GAAlB;AACA,MAAMM,MAAM,GAAG;AAACJ,IAAAA,MAAM,EAAE,OAAT;AAAkBC,IAAAA,WAAW,EAAE;AAA/B,GAAf;AAEA,MAAMI,WAAW,GAAGb,IAAI,CACxBC,SADoB,CACVzC,EAAE,CAAC0C,MAAH,CAAUnB,KAAV,CADU,CAApB;AAGD,MAAM5B,OAAO,GAAGK,EAAE,CAACsD,KAAH,EACjB;AACCD,EAAAA,WAAW,CAACE,QAAZ,CAAqB;AAAEX,IAAAA,KAAK,EAAE;AAAT,GAArB,EAAyCb,MAAzC,CACE/B,EAAE,CAACoC,CAAH,GAAOoB,KAAP,CAAa,CAAb,CADF,EAEExD,EAAE,CAACyD,IAAH,GAAUxB,MAAV,CAAiB,MAAjB,EAAyBE,QAAzB,CAAkC,WAAlC,CAFF,EAGEnC,EAAE,CAACsC,KAAH,GAAWkB,KAAX,CAAiB,OAAjB,CAHF,CAFgB,CAAhB;AAQFxD,EAAAA,EAAE,CAACQ,IAAH,CAAQJ,GAAR,EACGkD,KADH,CAEIzB,IAFJ,EAGI;AACA7B,EAAAA,EAAE,CAAC0D,QAAH,CAAY;AAACpB,IAAAA,KAAK,EAAE;AAAR,GAAZ,EACGG,SADH,CACazC,EAAE,CAAC0C,MAAH,CAAUnB,KAAV,CADb,EAEGQ,MAFH,CAEU/B,EAAE,CAACgC,CAAH,GAAOC,MAAP,CAAc,MAAd,CAFV,CAJJ,EAOI;AACAJ,EAAAA,IAAI,CAAC8B,UAAL,GACGC,MADH,CACUrC,KADV,EACiB;AADjB,GAEGQ,MAFH,CAEU/B,EAAE,CAAC6D,OAAH,GAAaC,EAAb,CAAgBvC,KAAhB,EAAuBvB,EAAE,CAACwD,KAAH,CAAS,CAAT,CAAvB,EAAoCA,KAApC,CAA0C,CAA1C,CAFV,CARJ,EAWI;AACAhB,EAAAA,IAAI,CAACe,QAAL,CAAcZ,KAAd,EAAqBI,KAArB,EAA4BhB,MAA5B,CAAmC/B,EAAE,CAACyD,IAAH,GAAUpB,KAAV,CAAgB,cAAhB,CAAnC,CAZJ,EAaI;AACAG,EAAAA,IAAI,CAACe,QAAL,CAAcZ,KAAd,EAAqBZ,MAArB,CAA4B/B,EAAE,CAACyD,IAAH,GAAUpB,KAAV,CAAgB,cAAhB,CAA5B,CAdJ,EAeA;AACE;AACA1C,EAAAA,OAjBF,EAkBGoE,KAlBH,CAkBS,GAlBT,EAmBGC,MAnBH,CAmBU,GAnBV,EAoBG9B,KApBH,CAoBS,0CApBT,EAsBG+B,MAtBH,GAuBG1D,IAvBH,CAuBQ,UAAA2D,WAAW,EAAI;AACrB;AACA;AACAC,IAAAA,QAAQ,CAACC,cAAT,CAAwB,MAAxB,EAAgCC,WAAhC,CAA4CH,WAA5C;AACD,GA3BD;AA4BD","file":"timeline.02a44989.js","sourceRoot":"..\\src","sourcesContent":["const options = {\r\n  config: {\r\n    // Vega-Lite default configuration\r\n  },\r\n  init: (view) => {\r\n    // initialize tooltip handler\r\n    view.tooltip(new vegaTooltip.Handler().call);\r\n  },\r\n  view: {\r\n    // view constructor options\r\n    // remove the loader if you don't want to default to vega-datasets!\r\n    //   loader: vega.loader({\r\n    //     baseURL: \"\",\r\n    //   }),\r\n    renderer: \"canvas\",\r\n  },\r\n};\r\n\r\nvl.register(vega, vegaLite, options);\r\n\r\n// Again, We use d3.csv() to process data\r\nvar uof = [];\r\n\r\nd3.json(\"https://data.seattle.gov/resource/ppi5-g2bj.json?$limit=20000\").then(function(data) {\r\n  const levels = [\"Level 1 - Use of Force\", \"Level 2 - Use of Force\", \"Level 3 - Use of Force\",\"Level 3 - OIS\"];\r\n    const parser = d3.timeParse('%Y-%m-%dT%H:%M:%S.%L');\r\n    const year = d3.timeFormat('%B %Y');\r\n    const bb = d3.timeFormat('%Y-%m');\r\n    uof = data.map(incident => ({\r\n        ...incident,\r\n        incident_type: 1+levels.indexOf(incident.incident_type),\r\n        occured_date_time: parser(incident.occured_date_time),\r\n        Occurance_Date: year(parser(incident.occured_date_time)),\r\n        blah: bb(parser(incident.occured_date_time))\r\n    }));\r\n   // console.log(uof); // This line was used to check values stored in uof after processing. feel free to delete.\r\n    drawTimeline();\r\n    // your other functions goes here. \r\n});\r\n\r\nfunction drawTimeline() {\r\n  // var sunshine = add_data(vl, sunshine.csv, format_type = NULL);\r\n  // your visualization goes here\r\n  const hover = vl.selectSingle()\r\n    .encodings('x')  // limit selection to x-axis value\r\n    .on('mouseover') // select on mouseover events\r\n    .nearest(true)   // select data point nearest the cursor\r\n    .empty('none');  // empty selection includes no data points \r\n  const line = vl.markLine()\r\n    .data(uof)\r\n    .encode(\r\n    vl.x().fieldT('blah').title(\"Date\").timeUnit(\"yearmonth\"),\r\n    vl.y().count(\"subject_race\").title(\"Counts\"), \r\n    vl.color().field(\"subject_race\"));\r\n    // shared base for new layers, filtered to hover selection\r\n   const base = line.transform(vl.filter(hover));\r\n\r\n   // mark properties for text label layers\r\n    const label = {align: 'left', dx: 5, dy: -5};\r\n    const white = {stroke: 'white', strokeWidth: 2};\r\n  \r\n     const dateBase = base.transform(vl.filter(hover));\r\n     const dateLabel = {align: 'center', dx:5, dy: -5};\r\n     const white1 = {stroke: 'white', strokeWidth: 2};\r\n\r\n     const tooltipBase = base\r\n    .transform(vl.filter(hover));\r\n\r\n    const tooltip = vl.layer(\r\n   // tooltipBase.markRule({ strokeWidth: 0.5 }),\r\n    tooltipBase.markText({ align: \"center\"}).encode(\r\n      vl.y().value(0),\r\n      vl.text().fieldT(\"blah\").timeUnit(\"yearmonth\"),\r\n      vl.color().value(\"black\")\r\n    )\r\n  )\r\n  vl.data(uof)\r\n    .layer(\r\n      line,\r\n      // add a rule mark to serve as a guide line\r\n      vl.markRule({color: '#aaa'})\r\n        .transform(vl.filter(hover))\r\n        .encode(vl.x().fieldT('blah')),\r\n      // add circle marks for selected time points, hide unselected points\r\n      line.markCircle()\r\n        .select(hover) // use as anchor points for selection\r\n        .encode(vl.opacity().if(hover, vl.value(1)).value(0)),\r\n      // add white stroked text to provide a legible background for labels\r\n      base.markText(label, white).encode(vl.text().count('subject_race')),\r\n      // add text labels for stock prices\r\n      base.markText(label).encode(vl.text().count('subject_race')),\r\n  //    dateBase.markText(dateLabel, white1).encode(vl.text().count('subject_race')),\r\n    //  dateBase.markText(dateLabel).encode(vl.text().fieldT('blah').timeUnit(\"yearmonthdate\"))\r\n    tooltip)\r\n    .width(700)\r\n    .height(350)\r\n    .title(\"Monthly Counts of Use of Force Incidents\")\r\n  \r\n    .render()\r\n    .then(viewElement => {\r\n    // render returns a promise to a DOM element containing the chart\r\n    // viewElement.value contains the Vega View object instance\r\n    document.getElementById('view').appendChild(viewElement);\r\n  });\r\n}\r\n \r\n\r\n  "]}